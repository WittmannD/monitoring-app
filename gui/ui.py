# -*- coding: utf-8 -*-

import subprocess
from datetime import datetime
# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from typing import List, Callable

import qtawesome as qta
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from plyer import notification

from gui.browser.browser import WebView
from models import PreparedTitleModel, MonitorModel


class ElidingLabel(QtWidgets.QWidget):
    def __init__(self, text='', parent=None):
        super(ElidingLabel, self).__init__(parent)
        self.layout = QtWidgets.QVBoxLayout(self)
        self.layout.setSpacing(0)
        self.layout.setContentsMargins(0, 0, 0, 0)

        self.setSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)

        self.label = QtWidgets.QLabel()
        self.fm = QtGui.QFontMetrics(self.font())
        self.mText = text

        self.label.setMaximumWidth(self.size().width())
        self.label.setText(self.fm.elidedText(self.mText, Qt.ElideRight, self.size().width()))

        self.layout.addWidget(self.label)
        self.setLayout(self.layout)

    def resizeEvent(self, rEvent):
        self.label.setMaximumWidth(self.size().width())
        self.label.setText(self.fm.elidedText(self.mText, Qt.ElideRight, self.size().width()))
        rEvent.accept()

    def setAlignment(self, *args, **kwargs):
        self.label.setAlignment(*args, **kwargs)


class TopBar(QtWidgets.QWidget):
    def __init__(self, parent):
        super(TopBar, self).__init__()
        self.parent = parent
        self.start = QtCore.QPoint(0, 0)
        self.pressing = False
        self.top_bar_widget = self

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.top_bar_widget.sizePolicy().hasHeightForWidth())
        self.top_bar_widget.setSizePolicy(sizePolicy)
        self.top_bar_widget.setMinimumSize(QtCore.QSize(0, 40))
        self.top_bar_widget.setStyleSheet("border-bottom: 1px solid rgb(230, 230, 230);")
        self.top_bar_widget.setObjectName("top_bar_widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.top_bar_widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.top_bar_button = QtWidgets.QPushButton(self.top_bar_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.top_bar_button.sizePolicy().hasHeightForWidth())
        self.top_bar_button.setSizePolicy(sizePolicy)
        self.top_bar_button.setMinimumSize(QtCore.QSize(40, 0))
        # self.top_bar_button.setStyleSheet('''
        #     QPushButton {
        #         background-color: transparent;
        #         vertical-align: baseline;
        #         border-radius: 14px;
        #         margin: 6px;
        #         border: none;
        #     }
        #     QPushButton:hover {
        #         background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(219, 219, 219, 255),
        #                                           stop:1 rgba(232, 232, 232, 255));
        #     }
        # ''')
        self.top_bar_button.setStyleSheet('''
            QPushButton {
                background-color: transparent;
                vertical-align: baseline;
                border-radius: 14px;
                margin: 6px;
                border: none;
            }
        ''')
        self.top_bar_button.setFlat(False)
        self.top_bar_button.setObjectName("top_bar_button")
        self.horizontalLayout.addWidget(self.top_bar_button)
        self.top_bar_label_layout = QtWidgets.QVBoxLayout()
        self.top_bar_label_layout.setContentsMargins(-1, 6, -1, 6)
        self.top_bar_label_layout.setSpacing(0)
        self.top_bar_label_layout.setObjectName("top_bar_label_layout")
        self.window_title_label = QtWidgets.QLabel(self.top_bar_widget)
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.window_title_label.setFont(font)
        self.window_title_label.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 rgba(219, 219, 219, 255), stop:1 rgba(232, 232, 232, 255));\n"
            "border-radius: 14px;\n"
            "vertical-align: middle;\n"
            "text-transform: uppercase;\n"
            "letter-spacing: 0.5;\n")
        self.window_title_label.setIndent(80)
        self.window_title_label.setObjectName("window_title_label")
        self.top_bar_label_layout.addWidget(self.window_title_label)
        self.horizontalLayout.addLayout(self.top_bar_label_layout)
        self.minimize_button = QtWidgets.QPushButton(self.top_bar_widget)
        self.minimize_button.setCursor(QtGui.QCursor(Qt.PointingHandCursor))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.minimize_button.sizePolicy().hasHeightForWidth())
        self.minimize_button.setSizePolicy(sizePolicy)
        self.minimize_button.setMinimumSize(QtCore.QSize(40, 0))
        self.minimize_button.setStyleSheet("background-color: transparent;\n"
                                           "vertical-align: middle;\n"
                                           "border: none;")
        self.minimize_button.setObjectName("minimize_button")
        self.minimize_button.setIcon(qta.icon('mdi.minus'))
        self.minimize_button.setStyleSheet("QPushButton {\n"
                                           "background-color: transparent;\n"
                                           "vertical-align: baseline;\n"
                                           "border-radius: 14px;\n"
                                           "margin: 6px;\n"
                                           "border: none;\n"
                                           "}\n"
                                           "QPushButton:hover {\n"
                                           "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(219, 219, 219, 255), stop:1 rgba(232, 232, 232, 255));\n"
                                           "}")
        self.horizontalLayout.addWidget(self.minimize_button)
        self.maximize_button = QtWidgets.QPushButton(self.top_bar_widget)
        self.maximize_button.setCursor(QtGui.QCursor(Qt.PointingHandCursor))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.maximize_button.sizePolicy().hasHeightForWidth())
        self.maximize_button.setSizePolicy(sizePolicy)
        self.maximize_button.setMinimumSize(QtCore.QSize(40, 0))
        self.maximize_button.setStyleSheet("background-color: transparent;\n"
                                           "vertical-align: middle;\n"
                                           "border: none;")
        self.maximize_button.setObjectName("maximize_button")
        self.maximize_button.setIcon(qta.icon("mdi.window-maximize"))
        self.maximize_button.setStyleSheet("QPushButton {\n"
                                           "background-color: transparent;\n"
                                           "vertical-align: baseline;\n"
                                           "border-radius: 14px;\n"
                                           "margin: 6px;\n"
                                           "border: none;\n"
                                           "}\n"
                                           "QPushButton:hover {\n"
                                           "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(219, 219, 219, 255), stop:1 rgba(232, 232, 232, 255));\n"
                                           "}")
        self.horizontalLayout.addWidget(self.maximize_button)
        self.close_button = QtWidgets.QPushButton(self.top_bar_widget)
        self.close_button.setCursor(QtGui.QCursor(Qt.PointingHandCursor))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.close_button.sizePolicy().hasHeightForWidth())
        self.close_button.setSizePolicy(sizePolicy)
        self.close_button.setMinimumSize(QtCore.QSize(40, 0))
        self.close_button.setStyleSheet("QPushButton {\n"
                                        "background-color: transparent;\n"
                                        "vertical-align: baseline;\n"
                                        "border-radius: 14px;\n"
                                        "margin: 6px;\n"
                                        "border: none;\n"
                                        "}\n"
                                        "QPushButton:hover {\n"
                                        "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(219, 219, 219, 255), stop:1 rgba(232, 232, 232, 255));\n"
                                        "}")
        self.close_button.setObjectName("close_button")
        self.close_button.setIcon(qta.icon('mdi.close'))
        self.horizontalLayout.addWidget(self.close_button)

    def mousePressEvent(self, event):
        self.start = self.window().mapFromGlobal(event.globalPos())
        self.pressing = True

    def mouseMoveEvent(self, event):
        if self.pressing:
            end = event.globalPos()
            movement = end - self.start

            self.window().setGeometry(movement.x(),
                                      movement.y(),
                                      self.parent.width(),
                                      self.parent.height())

    def mouseReleaseEvent(self, event):
        self.pressing = False


class ImageThumbnail(QtWidgets.QLabel):

    def __init__(self, path, parent=None):
        super(ImageThumbnail, self).__init__(parent)

        self.path = path
        self.image = QtGui.QImage(self.path)

        self.setMinimumWidth(200)
        self.setMaximumWidth(400)

    def paintEvent(self, event):
        painter = QtGui.QPainter(self)

        pen = QtGui.QPen(Qt.NoPen)
        brush = QtGui.QBrush(self.image.scaledToWidth(self.width(), Qt.SmoothTransformation))

        rect = QtCore.QRect(QtCore.QPoint(0, 0), self.size())

        painter.eraseRect(rect)
        painter.setRenderHint(QtGui.QPainter.HighQualityAntialiasing)
        painter.setPen(pen)
        painter.setBrush(brush)

        painter.drawRoundedRect(rect, 6, 6)

        grad = QtGui.QLinearGradient(0, 0, 0, rect.height())
        grad.setColorAt(0.0, QtGui.QColor(0, 0, 0, 20))
        grad.setColorAt(1.0, QtGui.QColor(80, 80, 80, 180))

        painter.setBrush(QtGui.QBrush(grad))

        painter.drawRoundedRect(rect, 6, 6)

        super(ImageThumbnail, self).paintEvent(event)


class FutureMonitorItem(QtWidgets.QWidget):
    def __init__(self, data: MonitorModel, f: Callable, parent=None):
        super(FutureMonitorItem, self).__init__(parent)

        self.setMinimumSize(QtCore.QSize(0, 100))
        self.setMaximumSize(QtCore.QSize(16777215, 100))
        self.setContextMenuPolicy(Qt.NoContextMenu)
        self.setStyleSheet("background-color: transparent")
        self.setObjectName("future_monitor_item_widget")
        verticalLayout = QtWidgets.QVBoxLayout(self)

        horizontalLayout = QtWidgets.QHBoxLayout(self)
        horizontalLayout.setContentsMargins(0, 0, 0, 0)
        verticalLayout.addLayout(horizontalLayout)

        label_0 = QtWidgets.QLabel(self)
        label_0.setText(data.name)
        horizontalLayout.addWidget(label_0, 1)

        self.button = QtWidgets.QPushButton(self)
        self.button.setCursor(QtGui.QCursor(Qt.PointingHandCursor))
        self.button.setIcon(qta.icon('mdi.plus'))
        self.button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.button.clicked.connect(lambda x: f(data))
        horizontalLayout.addWidget(self.button)

        label_1 = QtWidgets.QLabel(self)
        label_1.setText(data.keyword)
        verticalLayout.addWidget(label_1)

        label_2 = QtWidgets.QLabel(self)
        label_2.setText(data.description)
        verticalLayout.addWidget(label_2)


class MonitorItem(QtWidgets.QWidget):
    def __init__(self, data: MonitorModel, parent=None):
        super(MonitorItem, self).__init__(parent)

        self.setMinimumSize(QtCore.QSize(0, 100))
        self.setMaximumSize(QtCore.QSize(16777215, 100))
        self.setContextMenuPolicy(Qt.NoContextMenu)
        self.setStyleSheet("background-color: transparent")
        self.setObjectName("future_monitor_item_widget")
        verticalLayout = QtWidgets.QVBoxLayout(self)

        horizontalLayout = QtWidgets.QHBoxLayout(self)
        horizontalLayout.setContentsMargins(0, 0, 0, 0)
        verticalLayout.addLayout(horizontalLayout)

        label_0 = QtWidgets.QLabel(self)
        label_0.setText(data.name)
        horizontalLayout.addWidget(label_0, 1)

        self.icon_widget = qta.IconWidget()
        # spin_icon = qta.icon('mdi.loading', color='#5f8ac6', animation=qta.Pulse(spin_widget))
        icon = qta.icon('mdi.alert-circle-outline', color='maroon')
        self.icon_widget.setIcon(icon)
        self.icon_widget.setToolTip('is not running')
        horizontalLayout.addWidget(self.icon_widget)

        label_1 = QtWidgets.QLabel(self)
        label_1.setText(data.keyword)
        verticalLayout.addWidget(label_1)

        label_2 = QtWidgets.QLabel(self)
        label_2.setText(data.description)
        verticalLayout.addWidget(label_2)

        self.data = data


class WebtoonItem(QtWidgets.QWidget):
    def __init__(self, data: PreparedTitleModel, parent=None):
        super(WebtoonItem, self).__init__(parent)

        QtWidgets.QWidget()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(sizePolicy)
        self.setMinimumSize(QtCore.QSize(0, 150))
        self.setMaximumSize(QtCore.QSize(16777215, 150))
        self.setObjectName('webtoon_item')
        self.setStyleSheet('''
        QWidget#webtoon_item {
            background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 rgba(219, 219, 219, 255), stop:1 rgba(232, 232, 232, 255));
            border-radius: 8px''
        }
            ''')
        horizontalLayout_3 = QtWidgets.QHBoxLayout(self)
        horizontalLayout_3.setContentsMargins(6, 6, 6, 6)

        webtoon_label = ImageThumbnail(data.cover, self)
        webtoon_label.setMinimumSize(QtCore.QSize(200, 0))
        webtoon_label.setMaximumSize(QtCore.QSize(400, 16777215))
        webtoon_label.setAutoFillBackground(False)
        webtoon_label.setStyleSheet("border-radius: 6px;")
        webtoon_label.setText("")
        webtoon_label.setScaledContents(False)
        webtoon_label.setObjectName("webtoon_label")

        open_in_explorer_button = QtWidgets.QPushButton(self)
        open_in_explorer_button.setCursor(QtGui.QCursor(Qt.PointingHandCursor))
        open_in_explorer_button.setIcon(qta.icon('mdi.folder-open-outline', color='#fff'))
        open_in_explorer_button.setFixedSize(15, 15)
        open_in_explorer_button.move(10, 10)
        open_in_explorer_button.setStyleSheet('background-color: transparent')
        open_in_explorer_button.clicked.connect(lambda: subprocess.Popen(r'explorer /select,"{}"'.format(data.cover)))

        horizontalLayout_3.addWidget(webtoon_label)
        webtoon_item_content_layout = QtWidgets.QVBoxLayout()
        webtoon_item_content_layout.setContentsMargins(6, 6, 6, 6)
        horizontalLayout_7 = QtWidgets.QHBoxLayout()
        horizontalLayout_7.setContentsMargins(0, 0, -1, -1)
        horizontalLayout_7.setSpacing(12)
        horizontalLayout_7.setObjectName("horizontalLayout_7")

        titles_layout = QtWidgets.QVBoxLayout(self)
        titles_layout.setContentsMargins(0, 0, 0, 0)
        titles_layout.setSpacing(0)

        title_rus = ElidingLabel('<b>{}</b>'.format(data.title_rus))
        title_rus.setStyleSheet("background-color: transparent;")
        title_rus.setAlignment(Qt.AlignLeading | Qt.AlignLeft | Qt.AlignTop)
        title_rus.setObjectName("title_rus")

        title_eng = ElidingLabel('{}'.format(data.title_eng))
        title_eng.setStyleSheet("background-color: transparent;")
        title_eng.setAlignment(Qt.AlignLeading | Qt.AlignLeft | Qt.AlignTop)
        title_eng.setObjectName("title_eng")

        title_kor = ElidingLabel('{}'.format(data.title_kor))
        title_kor.setStyleSheet("background-color: transparent;")
        title_kor.setAlignment(Qt.AlignLeading | Qt.AlignLeft | Qt.AlignTop)
        title_kor.setObjectName("title_kor")

        titles_layout.addWidget(title_rus)
        titles_layout.addWidget(title_eng)
        titles_layout.addWidget(title_kor)
        horizontalLayout_7.addLayout(titles_layout)

        label_4 = QtWidgets.QLabel(self)
        label_4.setStyleSheet("background-color: transparent;")
        label_4.setAlignment(Qt.AlignLeading | Qt.AlignLeft | Qt.AlignTop)
        label_4.setIndent(-1)
        label_4.setObjectName("label_4")
        horizontalLayout_7.addWidget(label_4)
        label_3 = QtWidgets.QLabel(self)
        label_3.setStyleSheet("background-color: transparent;")
        label_3.setAlignment(Qt.AlignRight | Qt.AlignTop | Qt.AlignTrailing)
        label_3.setObjectName("label_3")
        horizontalLayout_7.addWidget(label_3)
        horizontalLayout_7.setStretch(0, 2)
        horizontalLayout_7.setStretch(1, 2)
        horizontalLayout_7.setStretch(2, 1)
        webtoon_item_content_layout.addLayout(horizontalLayout_7)

        description = QtWidgets.QLabel('{0}<br><a style="color: #2a70b0;" href="http://seoji.nl.go.kr/landingPage?{1}">{1}</a>'
                                       .format(data.description, data.isbn), self)
        description.setStyleSheet("background-color: transparent;")
        description.setAlignment(Qt.AlignLeading | Qt.AlignLeft | Qt.AlignTop)
        description.setObjectName("description")
        description.setOpenExternalLinks(True)

        webtoon_item_content_layout.addWidget(description)

        webtoon_item_button_layout = QtWidgets.QHBoxLayout()
        webtoon_item_button_layout.setSizeConstraint(QtWidgets.QLayout.SetMaximumSize)
        webtoon_item_content_layout.addLayout(webtoon_item_button_layout)

        webtoon_item_button_layout.addStretch(1)

        fill_form_button = QtWidgets.QPushButton(self)
        fill_form_button.setCursor(QtGui.QCursor(Qt.PointingHandCursor))
        fill_form_button.setMinimumSize(QtCore.QSize(0, 24))
        fill_form_button.setMaximumSize(QtCore.QSize(360, 24))
        fill_form_button.setSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        fill_form_button.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 rgba(95, 198, 152, 255), stop:1 rgba(105, 208, 162, 255));\n"
            "border-radius: 12px;")
        fill_form_button.setObjectName("fill_form_button")

        webtoon_item_button_layout.addWidget(fill_form_button, 1)

        self.delete_item_button = QtWidgets.QPushButton(self)
        self.delete_item_button.setCursor(QtGui.QCursor(Qt.PointingHandCursor))
        self.delete_item_button.setMinimumSize(QtCore.QSize(0, 24))
        self.delete_item_button.setMaximumSize(QtCore.QSize(30, 24))
        self.delete_item_button.setObjectName("delete_item_button")
        self.delete_item_button.setStyleSheet("QPushButton#delete_item_button:hover {"
                                   "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 rgba(198, 95, 95, 255), stop:1 rgba(208, 105, 105, 255));"
                                   "}"
                                   "QPushButton#delete_item_button {"
                                   "border-radius: 12px;"
                                   "background-color: transparent;"
                                   "}"
                                   )
        webtoon_item_button_layout.addWidget(self.delete_item_button, 1)

        webtoon_item_button_layout.addStretch(1)

        fill_form_button.setText("FILL FORM")
        self.delete_item_button.setIcon(qta.icon('mdi.trash-can-outline'))
        
        self.delete_item_button.setCursor(QtGui.QCursor(Qt.PointingHandCursor))
        fill_form_button.setCursor(QtGui.QCursor(Qt.PointingHandCursor))

        label_4.setText(data.keyword)
        label_3.setText(data.datetime)

        horizontalLayout_3.addLayout(webtoon_item_content_layout)
        horizontalLayout_3.setStretch(0, 1)
        horizontalLayout_3.setStretch(1, 3)

        self.data = data
        self.fill_form_button = fill_form_button


class Ui_MainWindow(object):
    fill_form = QtCore.pyqtSignal(PreparedTitleModel)
    delete_item = QtCore.pyqtSignal(QtWidgets.QWidget)
    start_monitoring = QtCore.pyqtSignal(list)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1600, 900)
        MainWindow.setStyleSheet("QMainWindow#MainWindow { background-color: #ffffff; }")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(10, 10, 10, 10)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.main_widget = QtWidgets.QWidget(self.centralwidget)
        self.main_widget.setObjectName("main_widget")
        self.main_widget.setStyleSheet("QWidget#main_widget { background-color: #ffffff; }")

        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.main_widget)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")

        ### Top Bar
        self.top_bar_widget = TopBar(MainWindow)

        self.verticalLayout_6.addWidget(self.top_bar_widget)

        ### ###

        self.main_container_widget = QtWidgets.QWidget(self.main_widget)
        self.main_container_widget.setObjectName("main_container_widget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.main_container_widget)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")

        self.left_container_tab_widget = QtWidgets.QTabWidget(self.main_container_widget)

        self.left_container_tab_widget.setMinimumSize(QtCore.QSize(300, 0))
        self.left_container_tab_widget.setMaximumSize(QtCore.QSize(300, 16777215))
        self.left_container_tab_widget.tabBar().hide()
        self.left_container_tab_widget.setStyleSheet('''border: none''')

        self.monitor_page_1 = QtWidgets.QWidget(self.left_container_tab_widget)

        self.monitor_page_1.setStyleSheet("")
        self.monitor_page_1.setObjectName("monitor_page_1")

        self.monitor_list = QtWidgets.QListWidget(self.monitor_page_1)
        self.monitor_list.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
        self.monitor_list.setSpacing(8)

        self.monitor_page_2 = QtWidgets.QWidget(self.left_container_tab_widget)

        self.monitor_page_2.setStyleSheet("")
        self.monitor_page_2.setObjectName("monitor_page_2")

        self.future_monitor_list = QtWidgets.QListWidget(self.monitor_page_2)
        self.future_monitor_list.setSpacing(8)

        # vl

        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.monitor_page_1)
        self.verticalLayout_5.setContentsMargins(8, 8, 8, 8)
        self.verticalLayout_5.setSpacing(9)
        self.verticalLayout_5.setObjectName("verticalLayout_5")

        self.verticalLayout_55 = QtWidgets.QVBoxLayout(self.monitor_page_2)
        self.verticalLayout_55.setContentsMargins(8, 8, 8, 8)
        self.verticalLayout_55.setSpacing(9)
        self.verticalLayout_55.setObjectName("verticalLayout_55")

        ##

        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.horizontalLayout_6.setContentsMargins(8, 8, 8, 8)
        self.add_monitor_button = QtWidgets.QPushButton(self.monitor_page_1)
        self.add_monitor_button.setCursor(QtGui.QCursor(Qt.PointingHandCursor))
        self.add_monitor_button.setMinimumSize(QtCore.QSize(0, 24))
        self.add_monitor_button.setMaximumSize(QtCore.QSize(16777215, 24))
        self.add_monitor_button.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 rgb(140, 190, 235), stop:1 rgb(144, 202, 249));\n"
            "border-radius: 12px;")
        self.add_monitor_button.setObjectName("add_monitor_button")
        self.horizontalLayout_6.addWidget(self.add_monitor_button)

        self.monitor_reload_button = QtWidgets.QPushButton(self.monitor_page_1)
        self.monitor_reload_button.setCursor(QtGui.QCursor(Qt.PointingHandCursor))
        self.monitor_reload_button.setMinimumSize(QtCore.QSize(30, 24))
        self.monitor_reload_button.setMaximumSize(QtCore.QSize(16777215, 24))
        self.monitor_reload_button.setObjectName("monitor_reload_button")
        self.monitor_reload_button.setIcon(qta.icon('mdi.reload'))
        self.monitor_reload_button.setStyleSheet("QPushButton#monitor_reload_button:hover {"
                                                 "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 rgb(140, 190, 235), stop:1 rgb(144, 202, 249));"
                                                 "}"
                                                 "QPushButton#monitor_reload_button {"
                                                 "border-radius: 12px;"
                                                 "background-color: transparent;"
                                                 "}")
        self.horizontalLayout_6.addWidget(self.monitor_reload_button)

        self.monitor_remove_button = QtWidgets.QPushButton(self.monitor_page_1)
        self.monitor_remove_button.setMinimumSize(QtCore.QSize(30, 24))
        self.monitor_remove_button.setMaximumSize(QtCore.QSize(16777215, 24))
        self.monitor_remove_button.setObjectName("monitor_remove_button")
        self.monitor_remove_button.setIcon(qta.icon('mdi.trash-can-outline'))
        self.monitor_remove_button.setStyleSheet("QPushButton#monitor_remove_button:hover {"
                                                 "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 rgba(198, 95, 95, 255), stop:1 rgba(208, 105, 105, 255));"
                                                 "}"
                                                 "QPushButton#monitor_remove_button {"
                                                 "border-radius: 12px;"
                                                 "background-color: transparent;"
                                                 "}")
        self.horizontalLayout_6.addWidget(self.monitor_remove_button)
        self.horizontalLayout_6.setStretch(0, 1)
        self.verticalLayout_5.addLayout(self.horizontalLayout_6)

        self.verticalLayout_5.addWidget(self.monitor_list, stretch=1)

        self.back_button = QtWidgets.QPushButton('back')
        self.back_button.setCursor(QtGui.QCursor(Qt.PointingHandCursor))
        self.back_button.setIcon(qta.icon('mdi.chevron-left'))
        self.back_button.setFlat(True)
        self.back_button.clicked.connect(lambda x: self.left_container_tab_widget.setCurrentIndex(0))

        self.verticalLayout_55.addWidget(self.back_button)
        self.verticalLayout_55.addWidget(self.future_monitor_list, stretch=1)

        self.left_container_tab_widget.addTab(self.monitor_page_1, '')
        self.left_container_tab_widget.addTab(self.monitor_page_2, '')

        self.horizontalLayout_2.addWidget(self.left_container_tab_widget)

        self.right_container_tab_widget = QtWidgets.QTabWidget(self.main_container_widget)

        self.webtoon_list_page = QtWidgets.QWidget(self.right_container_tab_widget)
        self.webtoon_list_page.setObjectName("right_container_widget")
        self.webtoon_list_page.setStyleSheet("QWidget#right_container_widget { background-color: #f0f0f0; }")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.webtoon_list_page)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.scrollArea = QtWidgets.QScrollArea(self.webtoon_list_page)
        self.scrollArea.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.scrollArea.setLineWidth(0)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setAlignment(Qt.AlignLeading | Qt.AlignLeft | Qt.AlignTop)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1300, 860))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_3.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout_3.setContentsMargins(18, 18, 18, 18)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.verticalLayout_3.addStretch(1)

        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_2.addWidget(self.scrollArea)

        ##
        self.browser_page = WebView()
        ##

        self.right_container_tab_widget.addTab(self.webtoon_list_page, '')
        self.right_container_tab_widget.addTab(self.browser_page, '')

        self.horizontalLayout_2.addWidget(self.right_container_tab_widget)
        self.verticalLayout_6.addWidget(self.main_container_widget)
        self.verticalLayout.addWidget(self.main_widget)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        MainWindow.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        MainWindow.setAttribute(QtCore.Qt.WA_TranslucentBackground)

        # self.shadow = QtWidgets.QGraphicsDropShadowEffect(MainWindow)
        # self.shadow.setBlurRadius(15)
        # self.shadow.setColor(QtGui.QColor(0, 0, 0, 100))
        # self.shadow.setOffset(0, 0)
        # self.main_widget.setGraphicsEffect(self.shadow)

        self.stored_titles = set()
        self.stored_monitors = set()

    def add_item(self, data: PreparedTitleModel):
        webtoon_item = WebtoonItem(data, self.scrollAreaWidgetContents)

        webtoon_item.fill_form_button.clicked.connect(lambda x: self.fill_form.emit(data))
        webtoon_item.delete_item_button.clicked.connect(lambda x: self.delete_item.emit(webtoon_item))

        self.verticalLayout_3.insertWidget(0, webtoon_item, 0, Qt.AlignTop)

        self.stored_titles.add(data)

    def delete_item_slot(self, item: WebtoonItem):
        self.stored_titles.difference_update({item.data})
        item.setParent(None)
        item.deleteLater()

    def add_monitor(self, data: MonitorModel):
        if not data.timestamp:
            data = MonitorModel(
                name=data.name,
                keyword=data.keyword,
                description=data.description,
                timestamp=datetime.timestamp(datetime.now())
            )

        self.left_container_tab_widget.setCurrentIndex(0)
        monitor_item_widget = MonitorItem(data, self.monitor_page_1)

        # self.verticalLayout_5.insertWidget(1, monitor_item_widget, alignment=Qt.AlignTop)

        list_item = QtWidgets.QListWidgetItem(self.monitor_list)
        list_item.setSizeHint(QtCore.QSize(100, 100))
        list_item.setData(Qt.UserRole, data.timestamp)
        list_item.setData(Qt.UserRole + 1, data.name)
        self.monitor_list.setItemWidget(list_item, monitor_item_widget)

        self.stored_monitors.add(data)

    def load_monitors(self, monitors: List[MonitorModel]):

        for data in monitors:
            monitor_item_widget = FutureMonitorItem(data, self.add_monitor, self.future_monitor_list)

            list_item = QtWidgets.QListWidgetItem(self.future_monitor_list)
            list_item.setSizeHint(QtCore.QSize(100, 100))
            self.future_monitor_list.setItemWidget(list_item, monitor_item_widget)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Seoji Monitoring Bot"))
        # self.top_bar_widget.top_bar_button.setIcon(qta.icon('mdi.cat'))
        self.add_monitor_button.setIcon(qta.icon('mdi.plus'))

        self.top_bar_widget.window_title_label.setText(_translate("MainWindow", "Seoji Monitoring Bot"))

